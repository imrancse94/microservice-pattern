# Define services
services:

  # App Service
  gateway:
    container_name: 'gateway'
    # Configuration for building the docker image for the service
    build:
      context: ./src/services/gateway/ # Use an image built from the specified dockerfile in the current directory.
      dockerfile: Dockerfile
    volumes:
      - ./src/services/gateway/.env.example:/app/services/gateway/.env
    ports:
      - "80:8000" # Forward the exposed port 8080 on the container to port 8080 on the host machine
    restart: unless-stopped
    depends_on:
      - redis # This service depends on redis. Start that first.
    environment: # Pass environment variables to the service
      REDIS_URL: redis:6379
    networks: # Networks to join (Services on the same network can pb with each other using their name)
      - backend

  auth:
    container_name: 'auth'
    # Configuration for building the docker image for the service
    build:
      context: ./src/services/auth/ # Use an image built from the specified dockerfile in the current directory.
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      - redis # This service depends on redis. Start that first.
    environment: # Pass environment variables to the service
      REDIS_URL: redis:6379
    networks: # Networks to join (Services on the same network can pb with each other using their name)
      - backend

  mariadb:
    container_name: 'db'
    image: 'mariadb:10'
    ports:
      - '3306:3306'
    environment:
      MYSQL_ROOT_PASSWORD: 'test'
      MYSQL_ROOT_HOST: "%"
      MYSQL_DATABASE: 'test'
      MYSQL_USER: 'test'
      MYSQL_PASSWORD: 'test'
      MYSQL_ALLOW_EMPTY_PASSWORD: 'No'
    volumes:
      - './docker/mariadb:/var/lib/mysql'
    networks:
      - backend

  # Redis Service
  redis:
    container_name: 'redis'
    image: "redis:alpine" # Use a public Redis image to build the redis service
    restart: unless-stopped
    networks:
      - backend

networks:
  backend: